openapi: 3.0.0
servers:
  - description: localhost
    url: 'http://localhost:3000/api/v1'
info:
  version: 1.0.0
  title: CRUD Server Demo Application API
  contact:
    email: annus.norbert@gmail.com
  license:
    name: MIT
tags:
  - name: authors
    description: Authors related calls
  - name: books
    description: Books related calls
  - name: categories
    description: Categories related calls
  - name: publishers
    description: Publishers related calls
paths:
  /authors:
    get:
      tags:
        - authors
      summary: Get authors
      operationId: getAuthors
      description: |
        Retrieves all the available authors in the system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDTO'
    post:
      tags:
        - authors
      summary: Create new author
      operationId: createAuthor
      description: |
        Creates a new author in the system
      responses:
        '201':
          description: Author has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created author
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorFirstNameIsRequired'
                  - $ref: '#/components/schemas/ErrorLastNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAuthorDTO'
        description: Properties of the new author to create
  '/authors/:id':
    get:
      tags:
        - authors
      summary: Get author
      operationId: getAuthor
      description: |
        Retrieves an existing author from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
    delete:
      tags:
        - authors
      summary: Delete author
      operationId: deleteAuthor
      description: |
        Removes an existing author from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to remove
      responses:
        '204':
          description: Author has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
    patch:
      tags:
        - authors
      summary: Update author
      operationId: updateAuthor
      description: |
        Updates an existing author in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
  /books:
    get:
      tags:
        - books
      summary: Get books
      operationId: getBooks
      description: |
        Retrieves all the available books in the system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    post:
      tags:
        - books
      summary: Create new book
      operationId: createBook
      description: |
        Creates a new book in the system
      responses:
        '201':
          description: Book has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created book
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorConstraintAuthor'
                  - $ref: '#/components/schemas/ErrorConstraintCategory'
                  - $ref: '#/components/schemas/ErrorConstraintPublisher'
                  - $ref: '#/components/schemas/ErrorISBN13IsRequired'
                  - $ref: '#/components/schemas/ErrorInvalidAuthorType'
                  - $ref: '#/components/schemas/ErrorInvalidCategoryType'
                  - $ref: '#/components/schemas/ErrorInvalidPublisherType'
                  - $ref: '#/components/schemas/ErrorTitleIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '409':
          description: Conflict
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookConflict'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBookDTO'
        description: Properties of the new book to create
  '/books/:id':
    get:
      tags:
        - books
      summary: Get book
      operationId: getBook
      description: |
        Retrieves an existing book from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
    delete:
      tags:
        - books
      summary: Delete book
      operationId: deleteBook
      description: |
        Removes an existing book from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to remove
      responses:
        '204':
          description: Book has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
    patch:
      tags:
        - books
      summary: Update book
      operationId: updateBook
      description: |
        Updates an existing book in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorConstraintAuthor'
                  - $ref: '#/components/schemas/ErrorConstraintCategory'
                  - $ref: '#/components/schemas/ErrorConstraintPublisher'
                  - $ref: '#/components/schemas/ErrorInvalidAuthorType'
                  - $ref: '#/components/schemas/ErrorInvalidCategoryType'
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorInvalidPublisherType'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
  /categories:
    get:
      tags:
        - categories
      summary: Get categories
      operationId: getCategories
      description: |
        Retrieves all the available categories in the system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
    post:
      tags:
        - categories
      summary: Create new category
      operationId: createCategory
      description: |
        Creates a new category in the system
      responses:
        '201':
          description: Category has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created category
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateDTO'
        description: Properties of the new category to create
  '/categories/:id':
    get:
      tags:
        - categories
      summary: Get category
      operationId: getCategory
      description: |
        Retrieves an existing category from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
    delete:
      tags:
        - categories
      summary: Delete category
      operationId: deleteCategory
      description: |
        Removes an existing category from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to remove
      responses:
        '204':
          description: Category has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
    put:
      tags:
        - categories
      summary: Update category
      operationId: updateCategory
      description: |
        Updates an existing category in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
  /publishers:
    get:
      tags:
        - publishers
      summary: Get publishers
      operationId: getPublishers
      description: |
        Retrieves all the available publishers in the system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublisherDTO'
    post:
      tags:
        - publishers
      summary: Create new publisher
      operationId: createPublisher
      description: |
        Creates a new publisher in the system
      responses:
        '201':
          description: Publisher has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created publisher
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublisherUpdateDTO'
        description: Properties of the new publisher to create
  '/publishers/:id':
    get:
      tags:
        - publishers
      summary: Get publisher
      operationId: getPublisher
      description: |
        Retrieves an existing publisher from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
    delete:
      tags:
        - publishers
      summary: Delete publisher
      operationId: deletePublisher
      description: |
        Removes an existing publisher from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to remove
      responses:
        '204':
          description: Publisher has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
    put:
      tags:
        - publishers
      summary: Update publisher
      operationId: updatePublisher
      description: |
        Updates an existing publisher in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublisherUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
components:
  schemas:
    AuthorDTO:
      type: object
      required:
        - firstName
        - fullName
        - id
        - middleName
        - lastName
      properties:
        firstName:
          type: string
          description: First name of the author
          example: Gayle
        fullName:
          type: string
          description: Full name of the author
          example: Gayle Laakmann McDowell
        id:
          type: number
          description: ID of the author
          example: 13
        middleName:
          type: string
          description: Middle name of the author
          example: McDowell
        lastName:
          type: string
          description: Last name of the author
          example: Laakmann
    AuthorUpdateDTO:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the author
        middleName:
          type: string
          description: Middle name of the author
        lastName:
          type: string
          description: Last name of the author
    BookDTO:
      type: object
      required:
        - authors
        - categories
        - id
        - isbn10
        - isbn13
        - publicationDate
        - publishers
        - title
      properties:
        authors:
          type: array
          items:
            type: string
            description: Full name of the author
            example: Gayle Laakmann McDowell
          description: Full names of authors of the book
        categories:
          type: array
          items:
            type: string
            description: Name of the category
            example: Computers & Technology
          description: Categories to which the book belongs to
        id:
          type: number
          description: ID of the book
          example: 6
        isbn10:
          type: string
          description: ISBN-10 of the book
          example: 0984782850
        isbn13:
          type: string
          description: ISBN-13 of the book
          example: 9780984782857
        publicationDate:
          type: string
          description: Publication date of the book
          example: 2015-07-01T00:00:00.000Z
        publishers:
          type: array
          items:
            type: string
            description: Publisher name
            example: CareerCup
          description: Publishers of the book
        title:
          type: string
          description: Title of the book
          example: >-
            Cracking the Coding Interview, 6th Edition: 189 Programming
            Questions and Solutions
    BookUpdateDTO:
      type: object
      properties:
        authors:
          type: array
          items:
            type: number
            description: ID of author
          description: IDs of authors of the book
        categories:
          type: array
          items:
            type: number
            description: ID of category
          description: IDs of categories of the book
        isbn10:
          type: string
          description: ISBN-10 of the book
        isbn13:
          type: string
          description: ISBN-13 of the book
        publicationDate:
          type: string
          description: Publication date of the book
        publishers:
          type: array
          items:
            type: number
            description: ID of publisher
          description: IDs of publishers of the book
        title:
          type: string
          description: Title of the book
    CategoryDTO:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: ID of the category
          example: 8
        name:
          type: string
          description: Name of the category
          example: Computers & Technology
    CategoryUpdateDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New name of the category
    ErrorAuthorDoesNotExist:
      type: string
      example: 'Author with ID = 1 does not exist'
    ErrorBookConflict:
      type: string
      example: 'A unique constraint violation occurred. Key (isbn_13) with value (1234567890123) already exists'
    ErrorBookDoesNotExist:
      type: string
      example: 'Book with ID = 1 does not exist'
    ErrorCategoryDoesNotExist:
      type: string
      example: 'Category with ID = 1 does not exist'
    ErrorConstraintAuthor:
      type: string
      example: 'A foreign key constraint violation occurred. Author with ID = 1 does not exist'
    ErrorConstraintCategory:
      type: string
      example: 'A foreign key constraint violation occurred. Category with ID = 1 does not exist'
    ErrorConstraintPublisher:
      type: string
      example: 'A foreign key constraint violation occurred. Publisher with ID = 1 does not exist'
    ErrorFirstNameIsRequired:
      type: string
      example: 'child "firstName" fails because ["firstName" is required]'
    ErrorInvalidAuthorType:
      type: string
      example: 'child "authors" fails because ["authors" at position 1 fails because ["1" must be a number]]'
    ErrorInvalidCategoryType:
      type: string
      example: 'child "categories" fails because ["categories" at position 1 fails because ["1" must be a number]]'
    ErrorInvalidID:
      type: string
      example: '"id" must be a number'
    ErrorInvalidPublisherType:
      type: string
      example: 'child "publishers" fails because ["publishers" at position 1 fails because ["1" must be a number]]'
    ErrorISBN13IsRequired:
      type: string
      example: 'child "isbn13" fails because ["isbn13" is required]'
    ErrorLastNameIsRequired:
      type: string
      example: 'child "lastName" fails because ["lastName" is required]'
    ErrorNameIsRequired:
      type: string
      example: 'child "name" fails because ["name" is required]'
    ErrorPublisherDoesNotExist:
      type: string
      example: 'Publisher with ID = 1 does not exist'
    ErrorTitleIsRequired:
      type: string
      example: 'child "title" fails because ["title" is required]'
    ErrorUnknownProperty:
      type: string
      example: '"foo" is not allowed'
    NewAuthorDTO:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          description: First name of the author
        middleName:
          type: string
          description: Middle name of the author
        lastName:
          type: string
          description: Last name of the author
    NewBookDTO:
      type: object
      required:
        - isbn13
        - title
      properties:
        authors:
          type: array
          items:
            type: number
            description: ID of author
          description: IDs of authors of the book
        categories:
          type: array
          items:
            type: number
            description: ID of category
          description: IDs of categories of the book
        isbn10:
          type: string
          description: ISBN-10 of the book
        isbn13:
          type: string
          description: ISBN-13 of the book
        publicationDate:
          type: string
          description: Publication date of the book
        publishers:
          type: array
          items:
            type: number
            description: ID of publisher
          description: IDs of publishers of the book
        title:
          type: string
          description: Title of the book
    PublisherDTO:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: ID of the publisher
          example: 3
        name:
          type: string
          description: Name of the publisher
          example: CareerCup
    PublisherUpdateDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New name of the publisher