openapi: 3.0.0
servers:
  - description: localhost
    url: 'http://localhost:3000/api/v1'
info:
  version: 1.0.0
  title: CRUD Server Demo Application API
  contact:
    email: annus.norbert@gmail.com
  license:
    name: MIT
tags:
  - name: auth
    description: Auth related calls
  - name: authors
    description: Authors related calls
  - name: books
    description: Books related calls
  - name: categories
    description: Categories related calls
  - name: publishers
    description: Publishers related calls
paths:
  /auth/github:
    get:
      tags:
        - auth
      summary: Initiate OAuth with GitHub
      operationId: authenticate
      description: Initiates the OAuth authentication process with GitHub
      responses:
        '302':
          description: Redirect
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: https://github.com/login/oauth/authorize?response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fv1%2Fauth%2Fgithub%2Fcallback&client_id=f00b4r
              description: The authorization URL for GitHub with the provided callback URL and client id
            set-cookie:
              schema:
                type: string
                example: connect.sid=f00b4r; Path=/; HttpOnly
              description: Session cookie
  /auth/github/callback:
    get:
      tags:
        - auth
      summary: GitHub authentication callback
      operationId: callback
      description: The registered callback URL of the OAuth GitHub application identified by the provided client id
      parameters:
        - in: query
          name: code
          schema:
            type: string
          description: Error code
      responses:
        '302':
          description: Redirect
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: /api/v1/books
              description: The relative URL of the endpoint which returns all the books
        '500':
          description: Token error
  /auth/profile:
    get:
      tags:
        - auth
      summary: Get user profile
      description: Returns the simplified user profile of the authenticated user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
  /auth/logout:
    post:
      tags:
        - auth
      summary: Log out current user
      description: Destroys the session of the currently logged in user
      responses:
        '200':
          description: OK
          content:
            text:
              schema:
                $ref: '#/components/schemas/MessageLoggedOut'
  /authors:
    get:
      tags:
        - authors
      summary: Get authors
      operationId: getAuthors
      description: Retrieves the available authors in the system in a filterable fashion
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Keyword to search for which matches on first/middle/last names
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorUnknownQueryParameter'
    post:
      tags:
        - authors
      summary: Create new author
      operationId: createAuthor
      description: Creates a new author in the system
      responses:
        '201':
          description: Author has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created author
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorFirstNameIsRequired'
                  - $ref: '#/components/schemas/ErrorLastNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAuthorDTO'
        description: Properties of the new author to create
  '/authors/:id':
    get:
      tags:
        - authors
      summary: Get author
      operationId: getAuthor
      description: Retrieves an existing author from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
    delete:
      tags:
        - authors
      summary: Delete author
      operationId: deleteAuthor
      description: Removes an existing author from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to remove
      responses:
        '204':
          description: Author has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
    patch:
      tags:
        - authors
      summary: Update author
      operationId: updateAuthor
      description: Updates an existing author in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the author to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Author does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorAuthorDoesNotExist'
  /books:
    get:
      tags:
        - books
      summary: Get books
      operationId: getBooks
      description: >-
        Retrieves the available books in the system in a paginated and
        filterable fashion
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Keyword to search for which matches on author/category/publisher
            names, ISBN IDs and title
        - in: query
          name: offset
          schema:
            type: number
            default: 0
          description: Pagination offset
        - in: query
          name: page-size
          schema:
            type: number
            default: 10
          description: Page size
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableCollectionDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidOffset'
                  - $ref: '#/components/schemas/ErrorInvalidPageSize'
                  - $ref: '#/components/schemas/ErrorUnknownQueryParameter'
    post:
      tags:
        - books
      summary: Create new book
      operationId: createBook
      description: Creates a new book in the system
      responses:
        '201':
          description: Book has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created book
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorConstraintAuthor'
                  - $ref: '#/components/schemas/ErrorConstraintCategory'
                  - $ref: '#/components/schemas/ErrorConstraintPublisher'
                  - $ref: '#/components/schemas/ErrorISBN13IsRequired'
                  - $ref: '#/components/schemas/ErrorInvalidAuthorType'
                  - $ref: '#/components/schemas/ErrorInvalidCategoryType'
                  - $ref: '#/components/schemas/ErrorInvalidPublisherType'
                  - $ref: '#/components/schemas/ErrorTitleIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '409':
          description: Conflict
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookConflict'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBookDTO'
        description: Properties of the new book to create
  '/books/:id':
    get:
      tags:
        - books
      summary: Get book
      operationId: getBook
      description: Retrieves an existing book from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
    delete:
      tags:
        - books
      summary: Delete book
      operationId: deleteBook
      description: Removes an existing book from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to remove
      responses:
        '204':
          description: Book has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
    patch:
      tags:
        - books
      summary: Update book
      operationId: updateBook
      description: Updates an existing book in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the book to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorConstraintAuthor'
                  - $ref: '#/components/schemas/ErrorConstraintCategory'
                  - $ref: '#/components/schemas/ErrorConstraintPublisher'
                  - $ref: '#/components/schemas/ErrorInvalidAuthorType'
                  - $ref: '#/components/schemas/ErrorInvalidCategoryType'
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorInvalidPublisherType'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Book does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorBookDoesNotExist'
  /categories:
    get:
      tags:
        - categories
      summary: Get categories
      operationId: getCategories
      description: Retrieves the available categories in the system in a filterable fashion
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Keyword to search for which matches on names
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorUnknownQueryParameter'
    post:
      tags:
        - categories
      summary: Create new category
      operationId: createCategory
      description: Creates a new category in the system
      responses:
        '201':
          description: Category has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created category
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateDTO'
        description: Properties of the new category to create
  '/categories/:id':
    get:
      tags:
        - categories
      summary: Get category
      operationId: getCategory
      description: Retrieves an existing category from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
    delete:
      tags:
        - categories
      summary: Delete category
      operationId: deleteCategory
      description: Removes an existing category from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to remove
      responses:
        '204':
          description: Category has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
    put:
      tags:
        - categories
      summary: Update category
      operationId: updateCategory
      description: Updates an existing category in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the category to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorInvalidID'
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Category does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorCategoryDoesNotExist'
  /publishers:
    get:
      tags:
        - publishers
      summary: Get publishers
      operationId: getPublishers
      description: Retrieves the available publishers in the system in a filterable fashion
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Keyword to search for which matches on names
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublisherDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorUnknownQueryParameter'
    post:
      tags:
        - publishers
      summary: Create new publisher
      operationId: createPublisher
      description: Creates a new publisher in the system
      responses:
        '201':
          description: Publisher has been successfully created
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: The relative resource URI of the created publisher
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublisherUpdateDTO'
        description: Properties of the new publisher to create
  '/publishers/:id':
    get:
      tags:
        - publishers
      summary: Get publisher
      operationId: getPublisher
      description: Retrieves an existing publisher from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to retrieve
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
    delete:
      tags:
        - publishers
      summary: Delete publisher
      operationId: deletePublisher
      description: Removes an existing publisher from the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to remove
      responses:
        '204':
          description: Publisher has been successfully removed
        '400':
          description: Validation failed
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorInvalidID'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
    put:
      tags:
        - publishers
      summary: Update publisher
      operationId: updatePublisher
      description: Updates an existing publisher in the system
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the publisher to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublisherUpdateDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherDTO'
        '400':
          description: Validation failed
          content:
            text:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ErrorNameIsRequired'
                  - $ref: '#/components/schemas/ErrorUnknownProperty'
        '403':
          description: Forbidden
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        '404':
          description: Publisher does not exist with the given ID
          content:
            text:
              schema:
                $ref: '#/components/schemas/ErrorPublisherDoesNotExist'
components:
  schemas:
    AuthorDTO:
      type: object
      required:
        - firstName
        - fullName
        - id
        - middleName
        - lastName
      properties:
        firstName:
          type: string
          description: First name of the author
          example: Gayle
        fullName:
          type: string
          description: Full name of the author
          example: Gayle Laakmann McDowell
        id:
          type: number
          description: ID of the author
          example: 13
        middleName:
          type: string
          description: Middle name of the author
          example: McDowell
        lastName:
          type: string
          description: Last name of the author
          example: Laakmann
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HATEOASLink'
            delete:
              $ref: '#/components/schemas/HATEOASLink'
            update:
              $ref: '#/components/schemas/HATEOASLink'
          example:
            self:
              href: /api/v1/authors/13
              method: GET
            delete:
              href: /api/v1/authors/13
              method: DELETE
            update:
              href: /api/v1/authors/13
              method: PATCH
    AuthorUpdateDTO:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the author
          example: Jane
        middleName:
          type: string
          description: Middle name of the author
          example: X.
        lastName:
          type: string
          description: Last name of the author
          example: Doe
    BookDTO:
      type: object
      required:
        - authors
        - categories
        - id
        - isbn10
        - isbn13
        - publicationDate
        - publishers
        - title
      properties:
        authors:
          type: array
          items:
            type: string
            description: Full name of the author
            example: Gayle Laakmann McDowell
          description: Full names of authors of the book
        categories:
          type: array
          items:
            type: string
            description: Name of the category
            example: Computers & Technology
          description: Categories to which the book belongs to
        id:
          type: number
          description: ID of the book
          example: 6
        isbn10:
          type: string
          description: ISBN-10 of the book
          example: 0984782850
        isbn13:
          type: string
          description: ISBN-13 of the book
          example: '9780984782857'
        publicationDate:
          type: string
          description: Publication date of the book
          example: '2015-07-01'
        publishers:
          type: array
          items:
            type: string
            description: Publisher name
            example: CareerCup
          description: Publishers of the book
        title:
          type: string
          description: Title of the book
          example: >-
            Cracking the Coding Interview, 6th Edition: 189 Programming
            Questions and Solutions
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HATEOASLink'
            delete:
              $ref: '#/components/schemas/HATEOASLink'
            update:
              $ref: '#/components/schemas/HATEOASLink'
          example:
            self:
              href: /api/v1/books/6
              method: GET
            delete:
              href: /api/v1/books/6
              method: DELETE
            update:
              href: /api/v1/books/6
              method: PATCH
    BookUpdateDTO:
      type: object
      properties:
        authors:
          type: array
          items:
            type: number
            description: ID of author
          description: IDs of authors of the book
          example:
            - 7
            - 13
        categories:
          type: array
          items:
            type: number
            description: ID of category
          description: IDs of categories of the book
          example:
            - 8
        isbn10:
          type: string
          description: ISBN-10 of the book
          example: 123456789X
        isbn13:
          type: string
          description: ISBN-13 of the book
          example: '1234567890123'
        publicationDate:
          type: string
          description: Publication date of the book
          example: '2001-02-03'
        publishers:
          type: array
          items:
            type: number
            description: ID of publisher
          description: IDs of publishers of the book
          example:
            - 2
        title:
          type: string
          description: Title of the book
          example: The Da Vinci Code
    CategoryDTO:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: ID of the category
          example: 8
        name:
          type: string
          description: Name of the category
          example: Computers & Technology
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HATEOASLink'
            delete:
              $ref: '#/components/schemas/HATEOASLink'
            update:
              $ref: '#/components/schemas/HATEOASLink'
          example:
            self:
              href: /api/v1/categories/8
              method: GET
            delete:
              href: /api/v1/categories/8
              method: DELETE
            update:
              href: /api/v1/categories/8
              method: PUT
    CategoryUpdateDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New name of the category
          example: Computers & Technology
    ErrorAuthorDoesNotExist:
      type: string
      example: Author with ID = 1 does not exist
    ErrorBookConflict:
      type: string
      example: >-
        A unique constraint violation occurred. Key (isbn_13) with value
        (1234567890123) already exists
    ErrorBookDoesNotExist:
      type: string
      example: Book with ID = 1 does not exist
    ErrorCategoryDoesNotExist:
      type: string
      example: Category with ID = 1 does not exist
    ErrorConstraintAuthor:
      type: string
      example: >-
        A foreign key constraint violation occurred. Author with ID = 1 does not
        exist
    ErrorConstraintCategory:
      type: string
      example: >-
        A foreign key constraint violation occurred. Category with ID = 1 does
        not exist
    ErrorConstraintPublisher:
      type: string
      example: >-
        A foreign key constraint violation occurred. Publisher with ID = 1 does
        not exist
    ErrorFirstNameIsRequired:
      type: string
      example: The property 'firstName' is required
    ErrorForbidden:
      type: string
      example: Forbidden 
    ErrorInvalidAuthorType:
      type: string
      example: The property 'authors' must contain numbers only
    ErrorInvalidCategoryType:
      type: string
      example: The property 'categories' must contain numbers only
    ErrorInvalidID:
      type: string
      example: The path parameter 'id' must be a number
    ErrorInvalidOffset:
      type: string
      example: The query parameter 'offset' must be a number
    ErrorInvalidPageSize:
      type: string
      example: The query parameter 'page-size' must be a number
    ErrorInvalidPublisherType:
      type: string
      example: The property 'publishers' must contain numbers only
    ErrorISBN13IsRequired:
      type: string
      example: The property 'isbn13' is required
    ErrorLastNameIsRequired:
      type: string
      example: The property 'lastName' is required
    ErrorNameIsRequired:
      type: string
      example: The property 'name' is required
    ErrorPublisherDoesNotExist:
      type: string
      example: Publisher with ID = 1 does not exist
    ErrorTitleIsRequired:
      type: string
      example: The property 'title' is required
    ErrorUnknownProperty:
      type: string
      example: The property 'foo' is not allowed
    ErrorUnknownQueryParameter:
      type: string
      example: The query parameter 'foo' is not allowed  
    HATEOASLink:
      type: object
      properties:
        href:
          type: string
          format: uri
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
    MessageLoggedOut:
      type: string
      example: Successfully logged out
    NewAuthorDTO:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          description: First name of the author
          example: John
        middleName:
          type: string
          description: Middle name of the author
          example: Y.
        lastName:
          type: string
          description: Last name of the author
          example: Doe
    NewBookDTO:
      type: object
      required:
        - isbn13
        - title
      properties:
        authors:
          type: array
          items:
            type: number
            description: ID of author
          description: IDs of authors of the book
          example:
            - 1
            - 3
        categories:
          type: array
          items:
            type: number
            description: ID of category
          description: IDs of categories of the book
          example:
            - 4
            - 7
        isbn10:
          type: string
          description: ISBN-10 of the book
          example: 123456789X
        isbn13:
          type: string
          description: ISBN-13 of the book
          example: '1234567890123'
        publicationDate:
          type: string
          description: Publication date of the book
          example: '2001-02-03'
        publishers:
          type: array
          items:
            type: number
            description: ID of publisher
          description: IDs of publishers of the book
          example:
            - 2
        title:
          type: string
          description: Title of the book
          example: The Da Vinci Code
    PageableCollectionDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookDTO'
        currentPage:
          type: number
          description: >-
            Current page of the result calculated by the current offset and page
            size
          example: 3
        totalItems:
          type: number
          description: Total number of items in the result
          example: 47
        totalPages:
          type: number
          description: >-
            Number of pages required to display the total number of items based
            on the current page size
          example: 5
        _links:
          type: object
          properties:
            first:
              $ref: '#/components/schemas/HATEOASLink'
            previous:
              $ref: '#/components/schemas/HATEOASLink'
            next:
              $ref: '#/components/schemas/HATEOASLink'
            last:
              $ref: '#/components/schemas/HATEOASLink'
          example:
            first:
              href: /api/v1/books?page-size=10&offset=0
              method: GET
            previous:
              href: /api/v1/books?page-size=10&offset=10
              method: GET
            next:
              href: /api/v1/books?page-size=10&offset=30
              method: GET
            last:
              href: /api/v1/books?page-size=10&offset=40
              method: GET
    PublisherDTO:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: ID of the publisher
          example: 3
        name:
          type: string
          description: Name of the publisher
          example: CareerCup
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HATEOASLink'
            delete:
              $ref: '#/components/schemas/HATEOASLink'
            update:
              $ref: '#/components/schemas/HATEOASLink'
          example:
            self:
              href: /api/v1/publishers/3
              method: GET
            delete:
              href: /api/v1/publishers/3
              method: DELETE
            update:
              href: /api/v1/publishers/3
              method: PUT
    PublisherUpdateDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: New name of the publisher
          example: CareerCup
    UserDTO:
      type: object
      properties:
        id:
          type: number
          description: ID of the user in GitHub
          example: 12345
        avatarUrl:
          type: string
          format: uri
          description: URL of the user's avatar
          example: https://avatars1.githubusercontent.com/u/4305472?v=4
        email:
          type: string
          format: email
          description: Email address of the user
          example: john.doe@dummy.com
        name:
          type: string
          description: Name of the user
          example: John Doe
        username:
          type: string
          description: Username of the user in GitHub
          example: J0hn_D03